// returns 1 if "vanilla monsters only" mode is enabled, used in spawners
script 656 (void)
{
	SetResultValue(GetCVAR("rgh_vanillamonstersonly"));
}

// Got hit by EMP
script 658 (void)
{
	int originX = GetActorX(0);
	int originY = GetActorY(0);
	int originZ = GetActorZ(0);

	//log(i:originX);
	//log(i:originY);
	//log(i:originZ);
	
	for(int i = MINIMUM_TID - MAX_PLAYER_COUNT; i < MINIMUM_TID; i++){
		if(SetActivator(i) == 0){
			continue;
		}
		
		//log(i:distanceFromPoint(originX, originY, originZ, 0));
		//log(i:distanceFromPoint(originX, originY, originZ, 0));
		
		if(
			abs(originX - GetActorX(0)) > 200 << 16 ||
			abs(originY - GetActorY(0)) > 200 << 16 ||
			abs(originZ - GetActorZ(0)) > 200 << 16
		)
		{
			continue;
		}
		
		if(distanceFromPoint(originX, originY, originZ, 0) > 200){
			continue;
		}
		
		// noise effect
		GiveInventory("EMPEffect", 1);
		GiveInventory("EMP2Effect", 1);		
		
		// ears ringing
		LocalAmbientSound("emp/flash",255);
		
		// bright white flash
		SetFont("FLSHSCRN");
		drawStretchedImage(2100+PlayerNumber(), 32, 32, 0.5, 2.0);
		
		LocalAmbientSound("emp/noise",255);
		
		// kick the view
		SetActorAngle(0,GetActorAngle(0)-random(10000, -10000));
		SetActorPitch(0,GetActorPitch(0)-random(10000, -10000));
		
		// remove powerups (powerup pickup actors make sure no new ones can be acquired)
		delay(2);
		TakeInventory("PowerIronFeet", 10);
		TakeInventory("PowerIronFeet_ScavengerPro", 10);
		TakeInventory("PowerLightAmp", 1);
		TakeInventory("PowerLightAmp_ScavengerPro", 10);
		TakeInventory("PowerInvisibility", 10);
		TakeInventory("PowerInvisibility_ScavengerPro", 10);
		TakeInventory("PowerInvisibility", 10);
		TakeInventory("PowerInvisibility_ScavengerPro", 10);
		TakeInventory("PowerInvulnerable", 10);
		TakeInventory("PowerInvulnerable_ScavengerPro", 10);
		TakeInventory("PowerPerk2_ColdBloodedProEffectPower", 10);
		
		// if the player is looking through thermal scope, reenable the thermal vision after EMP expires
		delay(7*36);	
		if(
			CheckInventory("PowerEMP") == 0 &
			(
				CheckWeapon("Intervention Thermal") == 1 ||
				CheckWeapon("WA2000 Thermal") == 1 ||
				CheckWeapon("Barett 50cal Thermal") == 1 ||
				CheckWeapon("M14 EBR Thermal") == 1
			) && CheckInventory("Aiming")	
		){
			GiveInventory("SniperInfrared", 1);
		}	
	}	
}

// Got hit by Inversion Revenant

int inversionRevenantTid;
script 663 (void)
{
	delay(2); // wait for 664 to execute

	int originX = GetActorX(0);
	int originY = GetActorY(0);
	int originZ = GetActorZ(0);

	
	
	for(int i = MINIMUM_TID - MAX_PLAYER_COUNT; i < MINIMUM_TID; i++){
		if(SetActivator(i) == 0){
			continue;
		}

		// outside blast radius (bounding box)
		if(
			abs(originX - GetActorX(0)) > 128 << 16 ||
			abs(originY - GetActorY(0)) > 128 << 16 ||
			abs(originZ - GetActorZ(0)) > 128 << 16
		)
		{
			continue;
		}
		
		// outside blast radius (radial distance)
		if(distanceFromPoint(originX, originY, originZ, 0) > 128){
			continue;
		}

		// do not swap if the revenant is too close (there is risk of the player getting stuck)
		if(distanceFromPoint(GetActorX(inversionRevenantTid), GetActorY(inversionRevenantTid), GetActorZ(inversionRevenantTid), 0) < 128){
			continue;
		}
		
		int playerX = GetActorX(0);
		int playerY = GetActorY(0);
		int playerZ = GetActorZ(0);
		int playerAngle = GetActorAngle(0);
		  
		SetActorAngle(0, GetActorAngle(inversionRevenantTid));
		SetActorAngle(inversionRevenantTid, playerAngle);
		SetActorPitch(0, 0);  
		
		SetActorPosition(0, GetActorX(inversionRevenantTid), GetActorY(inversionRevenantTid), GetActorZ(inversionRevenantTid), true);
		SetActorPosition(inversionRevenantTid, playerX, playerY, playerZ, true);			
	}
  
	GiveActorInventory(inversionRevenantTid,"RevenantMakeSolid", 1);	
}

script 664 (void)
{
  inversionRevenantTid = ActivatorTid();
}

