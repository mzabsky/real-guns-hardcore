namespace ZMP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Reflection;
    using System.Text;
    using System.Text.RegularExpressions;
    using NDesk.Options;
    using ZMP.Acs;
    using ZMP.Decorate;
    using ZMP.Utilities.Extensions;    

    internal class Program
    {
        public static readonly string FileHeader = "// This file was generated with ZDoom Mod Preprocessor " + Assembly.GetExecutingAssembly().GetName().Version + ". Do NOT edit this file manually." + Environment.NewLine;

        public static int Main(string[] args)
        {
            DateTime startTime = DateTime.Now;
            
            try
            {
                // parse command line options
                List<string> decoratePaths = new List<string>();
                List<string> acsFiles = new List<string>();
                string otputDecorateFile = "decorate.txt";
                string otputAcsFile = "acs.txt";
                string libraryName = "DEFAULTLIB";
                string mode = "zdoom";
                OptionSet options = new OptionSet()
                {
                    {
                        "a|acs=",  "ACS source files.", p => acsFiles.Add(p)
                    },    
                    {
                        "d|decorate=", "Directory with user DECORATE files.", p => decoratePaths.Add(p)
                    },
                    {
                        "o|acsOut=",  "Output ACS file. acs.txt is default.", p => otputAcsFile = p
                    },
                    {
                        "p|decorateOut=",  "Output DECORATE file. decorate.txt is default.", p => otputDecorateFile = p
                    },
                    {
                        "m|mode=", "Mode (ZDoom or Skulltag), ZDoom is default.", p => mode = p
                    },
                                        {
                        "l|library=", "Name of the ACS library.", p => libraryName = p
                    }
                };

                options.Parse(args);

                if (decoratePaths.Count == 0)
                {
                    throw new ArgumentException("No input decorate path specified.");
                }

                if (acsFiles.Count == 0)
                {
                    throw new ArgumentException("No input ACS file specified.");
                }

                DecorateParser parser = new DecorateParser();

                // add native decorate files
                string applicationDirectory = Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location) + "/";
                if (mode.Equals("ZDoom", StringComparison.OrdinalIgnoreCase))
                {
                    parser.AddFiles(new DirectoryInfo(applicationDirectory + "decorate/zdoom").GetFilesRecursive(), DecorateFileType.Native);
                }
                else
                {
                    parser.AddFiles(new DirectoryInfo(applicationDirectory + "decorate/skulltag").GetFilesRecursive(), DecorateFileType.Native);
                }

                // add user decorate files
                var files =
                    from path in decoratePaths
                    from file in new DirectoryInfo(path).GetFilesRecursive()
                    select file;

                parser.AddFiles(files, DecorateFileType.User);

                Console.WriteLine("Parsing DECORATE files...");

                // parse the files
                var actors = parser.GetActors();

                // print some stats
                var localActors = from actor in actors where !actor.IsFromNativeFile select actor;
                Console.WriteLine("Found " + actors.Count() + " actors (" + localActors.Count() + " user + " + (actors.Count() - localActors.Count()) + " native)");

                // add the classId actor to each monster
                Actor classIdActor = new Actor()
                {
                    Name = "__classId",
                    Parent = actors.OfName("inventory").First()
                };

                actors = actors.Append(classIdActor);

                var monsters = 
                    from actor in actors
                    where actor.HasFlagEnabled("ISMONSTER")
                    select actor;                                
                
                foreach (var monster in monsters)
                {
                    monster.StateMachine.InsertStatesBeforeState(
                        new List<State>
                        {
                            new FrameState()
                            {
                            },
                            new FrameState()
                            {
                                CodePointer = "A_TakeInventory(\"__classId\", 9999)"
                            },
                            new FrameState()
                            {
                                CodePointer = "A_GiveInventory(\"__classId\", " + monster.ID + ")"
                            }
                        },
                        monster.StateMachine.Labels["spawn"]);                    
                }                

                // generate ACS
                Console.WriteLine("Generating output ACS...");

                using (var textWriter = new StreamWriter(otputAcsFile))
                {
                    var writer = new AcsWriter(textWriter, libraryName);
                    writer.WriteCheckActorClass2(actors);
                    writer.WriteGetWeapon(actors);                    
                    writer.WriteGetCustomProperty(actors);
                    writer.WriteGetWeaponCustomProperty(actors);
                    writer.WriteOriginalContent(File.ReadAllText(acsFiles[0]));
                }

                // generate DECORATE
                Console.WriteLine("Generating output DECORATE...");

                using (var textWriter = new StreamWriter(otputDecorateFile))
                {
                    var writer = new DecorateWriter(textWriter);
                    writer.WriteActors(actors);
                }

                // print time stat
                TimeSpan timeDelta = DateTime.Now - startTime;
                Console.WriteLine("Done after " + Math.Round((double)timeDelta.TotalMilliseconds / 1000d, 2) + " seconds!");

                return 0;
            }
            catch (IOException e)
            {
                Console.WriteLine(e.GetType().Name + ": " + e.Message);
                Console.WriteLine(string.Empty);
                Console.WriteLine("Stack trace:");
                Console.WriteLine(e.StackTrace);

                return -1;
            }
        }
    }
}
